" VIMRC

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
"
" see :h vundle for more details or wiki for FAQ
"
set nocompatible              " be iMproved, required
filetype off                  " required

" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Sensible defaults
Plugin 'tpope/vim-sensible'

" Use .gitignore to filter for commands that search files
Plugin 'vim-scripts/gitignore'

" Use silver searcher in place of grep
Plugin 'rking/ag.vim'

" Unicode from latex
Plugin 'joom/latex-unicoder.vim'

" Provides fuzzy completer and clang based cleverness
" NOTE:
"   - You need to run an additional setup step to make this useable
"       cd ~/.vim/plugged/YouCompleteMe
"       python3 install.py
"
"   - For clang completion you have to run:
"       cd ~/.vim/plugged/YouCompleteMe
"       python3 install.py --clangd-completer
"
"   - If getting strange errors related to YouCompleteMe, delete the
"     ~/.vim/plugged path and reinstall everything
Plugin 'ycm-core/YouCompleteMe'

" Whitespace handling
Plugin 'ntpeters/vim-better-whitespace'

" Airline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Automatic closing of parenthesis etc.
Plugin 'Raimondi/delimitMate'

" Control-p for finding files
Plugin 'kien/ctrlp.vim'

" Icons
Plugin 'ryanoasis/vim-devicons'

" Polyglot
Plugin 'sheerun/vim-polyglot'

" NerdTree
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'

" Comment out Lines of Code
Plugin 'tpope/vim-commentary'

" Surround
Plugin 'tpope/vim-surround'

" SuperTab
Plugin 'ervandew/supertab'

" Syntastic
Plugin 'vim-syntastic/syntastic'

" Markdown
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" Color scheme
Plugin 'rakr/vim-one'

" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" html
Plugin 'gorodinskiy/vim-coloresque'
Plugin 'tpope/vim-haml'
Plugin 'mattn/emmet-vim'

" Python
Plugin 'davidhalter/jedi-vim'
Plugin 'raimon49/requirements.txt.vim', {'for': 'requirements'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
set number
set clipboard=unnamed
set laststatus=2
set noshowmode

" Encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set ttyfast

"" Fix backspace indent
set backspace=indent,eol,start

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Whitespace handling
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Git handling
autocmd Filetype gitcommit setlocal spell textwidth=72

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntax highlighting
let python_highlight_all=1
syntax on
set encoding=utf-8

" Swap between buffers without needing to save
set hidden

" None of these are word dividers
set iskeyword+=_,#

" Line numbers
set nu

" Show matching brackets
set showmatch

" Useful for c++ template delimiter match
set matchpairs+=<:>

" Leave rows of space when scrolling
set scrolloff=15

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Color scheme
if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

" For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
" Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
"  < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
if (has("termguicolors"))
  set termguicolors
endif

let g:airline_theme='one'
set background=dark
colorscheme one

" Highlight current line by making the row number on the lhs stand out
set cursorline
hi CursorLine ctermbg=NONE cterm=NONE term=NONE
hi CursorLineNr ctermfg=166 ctermbg=236  term=bold cterm=bold

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable folding
set foldmethod=indent
set foldlevel=99
nnoremap <space> za     " fold with spacebar

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fix tabs/spaces
" tab width = 4
set tabstop=4

" Indents will have a width of 4
set shiftwidth=4

" Sets the number of columns for a TAB
set softtabstop=4

" Expand TABs to spaces
set expandtab

" Highlight tabs and trailing spaces
set list
set listchars=tab:-.,trail:.

" Wrap long lines
set wrap

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search options
" Search as characters are entered
set incsearch

" Highlight matches
set hlsearch
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key bindings
" set leader to space
let mapleader = "\<Space>"

" hit leader then "e" to reload files that have changed outside the editor
nnoremap <leader>e :edit<CR>

" hit leader then "n" to remove line numbers
" nnoremap <leader>n :set nu!<CR>
"Rotate through no linenumbers, absolute line numbers, and relative line numbers:
noremap <silent> <Leader>n :if &rnu<bar>set nornu<bar>set nonumber<bar>elseif &number<bar>set rnu<bar>else<bar>set number<bar>endif<cr>

" hit space space to remove hilights from previous search
nnoremap <leader><Space> :nohlsearch<CR>

" toggle paste mode
" this ignores indentation rules when pasting
nnoremap <leader>p :set paste! paste?<CR>

" make left and right keys cycle between tabs
nnoremap <right> :tabnext<CR>
nnoremap <left>  :tabprev<CR>

" make up and down keys move tabs left and right
nnoremap <up>    :tabm -1<CR>
nnoremap <down>  :tabm +1<CR>

" use leader with "lhkj" movements to switch window focus
nnoremap <leader>l <C-w>l
nnoremap <leader>h <C-w>h
nnoremap <leader>k <C-w>k
nnoremap <leader>j <C-w>j

" use leader with up-down-left-right to resize the current window
nnoremap <leader><right> :vertical resize +5<CR>
nnoremap <leader><left>  :vertical resize -5<CR>
nnoremap <leader><up>    :resize +5<CR>
nnoremap <leader><down>  :resize -5<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" --- jedi-vim ---
"
let g:jedi#popup_on_dot = 0
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = "<leader>d"
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#rename_command = "<leader>r"
let g:jedi#show_call_signatures = "0"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#smart_auto_mappings = 0

" --- nerdtree ---
"
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 50
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
nnoremap <silent> <F2> :NERDTreeFind<CR>
nnoremap <silent> <F3> :NERDTreeToggle<CR>

" --- airline ---
"
let g:airline_theme = 'powerlineish'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_skip_empty_sections = 1

" --- YouCompleteMe ---
"
" Don't seek confirmation every time ycm_conf file is found
let g:ycm_confirm_extra_conf = 0

" Go to definition of variable/type/function under cursor
nnoremap <leader>d  ::YcmCompleter GoTo<CR>
" Print type of symbol under the cursor
nnoremap <leader>t  ::YcmCompleter GetType<CR>
" Print type of symbol under the cursor
nnoremap <leader>f  ::YcmCompleter FixIt<CR>
" Refactor the name under the cursor
nnoremap <leader>r  ::YcmCompleter RefactorRename<space>

" Fancy error symbols
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'

" --- LaTeX to unicode ---
"
let g:unicoder_cancel_normal = 1
let g:unicoder_cancel_insert = 1
let g:unicoder_cancel_visual = 1
nnoremap <leader>u :call unicoder#start(0)<CR>
vnoremap <leader>u :<C-u>call unicoder#selection()<CR>

highlight YcmWarningSign    ctermfg=14
highlight YcmWarningSection ctermfg=14
highlight YcmErrorSign      ctermfg=14
highlight YcmErrorSection   ctermfg=14

highlight YcmWarningSection cterm=bold
highlight YcmErrorSection   cterm=bold

" --- ctrlp ---
"
" Configure ctrlp to use ag for searching
" This interacts nicely with the gitignore vim package
let g:ctrlp_use_caching = 0
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor

    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
else
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
  let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>'],
    \ }
endif
